#!/bin/bash

# Set your base folder path
BASE_DIR="/your/folder/path"

# Get cutoff date: 6 months ago from today
CUTOFF_DATE=$(date -d "6 months ago" +%Y%m%d)

cd "$BASE_DIR" || exit 1

for folder in */; do
  folder_name="${folder%/}"

  # Match folder names in YYYYMMDD format
  if [[ "$folder_name" =~ ^[0-9]{8}$ ]]; then
    # Compare folder name with cutoff date
    if [[ "$folder_name" -lt "$CUTOFF_DATE" ]]; then
      echo "Deleting: $folder_name"
      rm -rf "$folder_name"
    else
      echo "Keeping:  $folder_name"
    fi
  fi
done



Great question!

If your folder names include timestamps like YYYYMMDDHHMMSS (e.g. 20240115093000), you can still use the same logic ‚Äî just update the format and comparison.


---

üóÇÔ∏è Example Folder Names With Timestamps:

20240115093000   ‚Üí 15 Jan 2024, 09:30:00  
20250429000000   ‚Üí 29 Apr 2025, 00:00:00  
20250506153000   ‚Üí 06 May 2025, 15:30:00


---

‚úÖ Updated Bash Script (Handles Timestamps: YYYYMMDDHHMMSS)

#!/bin/bash

# Set your folder path
BASE_DIR="/your/folder/path"

# Get cutoff datetime: 6 months ago in full timestamp format
CUTOFF_TIMESTAMP=$(date -d "6 months ago" +%Y%m%d%H%M%S)

cd "$BASE_DIR" || exit 1

for folder in */; do
  folder_name="${folder%/}"

  # Check if folder name is a 14-digit timestamp
  if [[ "$folder_name" =~ ^[0-9]{14}$ ]]; then
    if [[ "$folder_name" -lt "$CUTOFF_TIMESTAMP" ]]; then
      echo "Deleting: $folder_name"
      rm -rf "$folder_name"
    else
      echo "Keeping:  $folder_name"
    fi
  fi
done


---

üß† Explanation of Changes

Section	What's New

date +%Y%m%d%H%M%S	Full timestamp format: e.g., 20250116121300
^[0-9]{14}$	Checks for 14-digit folder names (date+time format)
Folder Comparison	Now compares full datetime (more precise than just date)



---

üß™ Example Behavior (if today is 2025-07-16 10:00:00)

Folder Name	Meaning	Age	Deleted?

20240115093000	Jan 15, 2024 @ 09:30 AM	>6 months	‚úÖ Yes
20250215100000	Feb 15, 2025 @ 10:00 AM	~5 months	‚ùå No



---

Would you like me to:

Add dry-run toggle?

Convert this to a Python version?

Filter by last modified time instead of name?


Let me know!




Perfect ‚Äî if you want to delete all files and folders in a directory that were last modified more than 6 months ago, regardless of their name or structure, then you should use the find command.


---

‚úÖ Bash Script: Delete Anything Older Than 6 Months by Last Modified Time

#!/bin/bash

# Path to the directory you want to clean up
TARGET_DIR="/your/folder/path"

# Find all files and directories older than 6 months and delete them
find "$TARGET_DIR" -mindepth 1 -mtime +180 -exec rm -rf {} \;

# Explanation:
# -mindepth 1   : prevents deleting the root directory itself
# -mtime +180   : modified more than 180 days ago (‚âà 6 months)
# -exec rm -rf {} \; : delete the file or directory


---

üß† Explanation

Flag/Option	Meaning

find	Search for files/folders
"$TARGET_DIR"	The path to scan
-mindepth 1	Avoid deleting the base directory
-mtime +180	Match anything last modified more than 180 days ago
-exec rm -rf {}	Forcefully delete each item found



---

üîç Example Use Case

If your directory contains:

file1.txt        (last modified: 2023-11-10)
folderA/         (last modified: 2024-01-01)
folderB/         (last modified: 2025-06-01)

Then:

file1.txt ‚úÖ deleted

folderA/ ‚úÖ deleted

folderB/ ‚ùå kept (newer than 6 months)



---

üõ°Ô∏è Safety Tip ‚Äì Dry Run First

Run this first to preview deletions:

find "$TARGET_DIR" -mindepth 1 -mtime +180 -exec ls -ld {} \;


---

Would you like:

A cronjob version for auto cleanup?

A version that logs deleted items to a file?

A way to delete only files, not folders?


Let me know.



